name: Release

on:
  release:
    types:
      - released
      - prereleased

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: 1.24.1

jobs:
  build:
    name: "Compile the binaries"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: ['386', amd64, arm, arm64]
        exclude:
          - arch: '386'
            os: darwin
          - arch: arm
            os: darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          output_name="bin/petpet-$GOOS-$GOARCH"
          if [ "$GOOS" = "windows" ]; then
            output_name="$output_name.exe"
          fi
          go build -v -trimpath -ldflags="-s -w" -o "$output_name" github.com/wavy-cat/petpet-go/cmd/app

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/

  upload:
    name: "Upload assets"
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "Download binaries"
        uses: actions/download-artifact@v4
        id: artifacts

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in "${{ steps.artifacts.outputs.download-path }}"/*; do
            gh release upload "${{ github.event.release.tag_name }}" "$file" --clobber
          done

  publish-docker:
    name: "Push to GHCR"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm
          file: ./Dockerfile
          push: true
          labels: |
            org.opencontainers.image.revision=${{ github.event.release.tag_name }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max